Basic Building Blocks -- 
sqrt(num) : calculate the square root of 'num'
abs(num) : calculate the absolute value of 'num'

Workspace --
getwd() : determine the current working directory
ls() : view all the objects in local workspace
list.files() : view all the files in working directory
?function : view help page for a given 'function'
args(function) : view the arguments a 'function' can take
dir.create("dirname") : create a directory in the current working called 'dirname'; use 'recursive = TRUE' for nesting
setwd("dirname") : set your working directory to 'dirname'
file.create("filename") : create a file in working directory called 'filename'
file.exists("filename") : check that a file called 'filename' exists
file.info("filename") : display information about the file called 'filenmame'
file.rename("filename1", "filename2") : change the name of the file 'filename1' to 'filename2'
file.remove("filename") : remove the file 'filename' from the working directory
file.path("filename") : display the relative path to the file 'filename'
file.path("dir1", "dir2") : display the relative path from 'dir1' to 'dir2'
unlink('dirname') : remove directory 'dirname'; if directory is not empty, must use 'recursive = TRUE'

Sequences --
seq(start, end, by, length) : generate a sequence from 'start' to 'end' incremented by 'by' or with given 'length'
length(variable) : display the length of a 'variable'
seq_along(variable) : generate a sequence the same length as 'variable'
rep(vector, times, each) : copy either the 'vector' in full the number of 'times' OR 
                            each element of 'vector' the number 'each'

Vectors --
c(elements) : create a vector;  all 'elements' in vector must be the same atomic type 
              (numeric, logical, character, integer, or complex)
paste(vector, collapse, sep) : join the elements of 'vector' together into one continuous character string, 
              joined by the 'collapse' character(s), and/or separated by 'sep' character(s)

Missing Values --
rnorm(num, mean, sd) : generate 'num' random numbers from a normal distribution; 
                      with a mean of 'mean' and standard deviation of 'sd'; default mean = 0, sd = 1
sample(data, size, replace) : draw a random sample of 'size' elements from 'data'; if replace is TRUE, then can have repeats
is.na(vector) : create a vector of whether each element of 'vector' is NA
sum(vector) : total of values in 'vector'

Subsetting Vectors --
vector[logical test] : return the elements of 'vector' for which 'logical test' is TRUE
vector[num] : return the 'num' element of 'vector'
vector[-num] : return all elements of 'vector' except 'num'
names(vector) : get/set the names of the elements in 'vector'
identical(item1, item2) : determine if 'item1' and 'item2' are identical
vector["name"] : return the element in 'vector' called 'name'

Matrices & Data Frames --
dim(matrix) : view the dimensions of 'matrix' (number of rows and columns)
class(object) : view the class of 'object'
matrix(data, nrow, ncol) : create a matrix of 'data' with 'nrow' number of rows and 'ncol' number of columns;
          all 'data' in matrix must be the same atomic type (numeric, logical, character, integer, or complex);
          matrices are vectors with multiple rows
cbind(column, matrix) : add 'column' to 'matrix'
data.frame(data) : create a data frame containing 'data'; a data frame is a list of vectors
colnames(dataframe) : get/set the column names for 'dataframe'

Logic --
isTRUE(arg) : return TRUE/FALSE value of 'arg'
xor(arg1, arg2) : (exclusive OR) return TRUE if one 'arg' is TRUE and the other is FALSE, otherwise return FALSE
which(vector) : return vector containing only the indices of 'vector' that are TRUE
any(vector logic test) : return TRUE if any elements of 'vector' are TRUE for 'logic test', else return FALSE
all(vector logic test) : return TRUE if all elements of 'vector' are TRUE for 'logic test', else return FALSE

Functions --
Sys.Date() : display the current date
mean(numeric vector) : return average of the numbers in 'numeric vector'
sd(numeric vector) : return standard deviation of the numbers in 'numeric vector'
new_func = function(x){commands} : create a function called 'new_func' with parameter(s) 'x' which executes 'commands'

Apply Functions (lapply, sapply, vapply, tapply) --
head(datafame, num) : view the first six (or 'num') lines of 'dataframe'
lapply(list, function) : applies 'function' to each element 'list' and returns the results in a list 
                        of the same length as the original one; can define 'function' within lapply
as.list(input) : transform 'input' to a list, if possible; lists are matrices that can hold more than one atomic type
as.character(input) : transform 'input' to the character atomic type, if possible
as.numeric(input) : transform 'input' to the numeric atomic type, if possible
as.vector(input) : transform 'input' to a vector, if possible
as.data.frame(input) : transform 'input' to a data frame, if possible
sapply(list, function) : same as lapply, but simplifies the result into a vector or matrix, if possible
range(numeric vector) : return the minimum and maximum 'numeric vector'
unique(vector) : return 'vector' with all duplicate elements removed
vapply(list, function, format) : same as sapply, but tries to simplfy to 'format'; if unable to simplfy, 
            will throw an error and the operation will stop; format can also specify length of the result
numeric(data) : create a numeric vector containing 'data'
character(data) : create a character vector containing 'data'
tapply(list1, list2, function) : same as lapply, but splits 'list1' into groups based on 'list2' and applies
            'function' to the members of each group
table(vector) : create a table of each unique value in 'vector' with the count of occurences

Looking at Data --
nrow(data) : display the number of rows in 'data'
ncol(data) : display the number of columns in 'data'
object.size(data) : display how much memory is occupied 'data'
tail(datafame, num) : view the last six (or 'num') lines of 'dataframe'
summary(dataframe) : view a summary of the distribution of each variable and how many missing values are present;
        for numeric data, displays the minimum, 1st quartile, median, mean, 3rd quartile, and maximum;
        for categorical variables (factors), displays the number of times each value (level) occurs in the data,
        if too many to display, summary is truncated into catch-all category called 'Other'
str(data) : view the structure of 'data'; the class of 'data' is at the top followed by the number of rows and columns;
        then the name and class of each column (variable) with a preview of the contents; 
        can be used on any type of object, including functions

Simulation --
rbinom(num, size, prob) : generate 'num' random binomial number, 'size' times, with probability of 'prob'
......probability functions: r___ (random), d___ (density), p___ (probability), q___ (quantile)
......probability distributions: _binom (binomial), _norm (normal), _pois (Poisson), _exp (expontial), 
                                  _chisq (chi-squared) , _gamma (gamma), etc
colMeans(data) : find the mean of each column in 'data'
hist(data) : plot a histagram of 'data'

Dates & Times --


Base Graphics --
